#+TITLE: doom-emacs-private

my private emacs configuration based on *doom-emacs*.

* Packages

Recording function of packages and how to configure those.

** Python & Enhancement

Reference to some configuration from xfu.
 
*** TODO lsp
Refer to xfu.
- lsp-mode
- lsp-ui
- lsp-python

#+begin_src emacs-lisp :tangle yes
;; enable lsp-mode
(require 'lsp-mode)
;;(require 'lsp-ui)
(require 'lsp-python)			; provide lsp-mode configuration
(add-hook 'python-mode-hook #'lsp-python-enable)
(add-hook 'lsp-mode-hook 'lsp-ui-mode)
(add-hook 'python-mode-hook #'yas-minor-mode)
(add-hook 'python-mode-hook 'flycheck-mode)

;; enable company-lsp as back-end of company
(require 'company-lsp)
(push 'company-lsp company-backends)
#+end_src

*** DONE conda
存在一点小问题，flycheck的语法检查使用默认pylint，而不是conda环境下的pylint。当然如果默认可以支持检索conda环境也倒无所谓。

解决办法：
1. 在工程目录下设定dotfile配置文件，创建 ~.pylintrc~ 来设定pylint的行为、 ~.dir-locals.el~ 来设定在打开python文件的时候决定进入哪一个Conda环境，接着执行 ~conda-env-activate-for-buffer~ 来最终激活Conda环境。其实，也可以在初始化完成之后，向 ~python-mode-hook~ 添加函数钩子，来自动激活Conda环境。
2. 手动设置flycheck的pylint执行路径，并在对buffer激活相应Conda环境的时候设置。

#+begin_src emacs-lisp :tangle yes
;; FIXME conda
;; Cannot use pylint
;; (defun flycheck-change-python-pylint-for-conda(path-to-pylint)
;;   (setq flycheck-python-pylint-executable path-to-pylint))

(defvar +conda-anaconda-home nil
  "your anaconda or miniconda installed path")

(setq +conda-anaconda-home "~/.conda/");"/opt/anaconda")

(def-package! conda
  :commands (conda-env-activate-for-buffer)
  :init
  (setq conda-anaconda-home +conda-anaconda-home)
  :config
  (conda-env-initialize-interactive-shells)
  (conda-env-initialize-eshell)
  (conda-env-autoactivate-mode t)

  ;; Setting flycheck
  ;; (setq flycheck-python-pylint-executable
  ;;       (concat (file-name-as-directory (conda-env-name-to-dir conda-env-current-name))
  ;;               conda-env-executables-dir))
  ;;
  ;; (flycheck-change-python-pylint-for-conda (concat (file-name-as-directory (conda-env-name-to-dir conda-env-current-name))
  ;;                                                  conda-env-executables-dir
  ;;                                                  "/pylint"))
  ;; Version management with pyenv
  (defun +python|add-version-to-modeline ()
    "Add version string to the major mode in the modeline."
    (setq mode-name
          (if conda-env-current-name
              (format "Py[%s]" conda-env-current-name)
            "Python")))
  (add-hook 'conda-postactivate-hook #'+python|add-version-to-modeline)
  (add-hook 'conda-postdeactivate-hook #'+python|add-version-to-modeline)
  ;; autoload conda environment
  (add-hook 'python-mode-hook #'conda-env-activate-for-buffer))
#+end_src

*** TODO lpy
a minimum ide of python.

*** TODO py-isort

*** TODO yapfify
python code formatter.

*** TODO nose
python test.

*** TODO dwim
do what I mean?

** Org & Enhancement

*** built-in

**** org-plus-contrib
Org Emacs lisp Package Archive. Function Enhancement.

**** org-bullets
Show org-mode bullets as UTF-8 characters. It beatify head of headline.
Install: This package is included in Doom-Emacs.
#+begin_src emacs-lisp :tangle yes
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
#+end_src

**** toc-org
Show table of content from a org file.
Install: This package is included in Doom-Emacs.

**** org-download
built-in in Doom-Emacs.

**** ob-translate
翻译代码块里的文字。
依赖 *谷歌翻译* 。

**** ox-pandoc
org-mode导出到任意格式文档。

**** htmlize
将buffer转换为HTML文件。

**** centered-window-mode
当只显示一个buffer的时候，居中显示。
写作专用。

**** org-tree-slide
意味不明。文档展示用，slide。

**** ox-reveal
和 ~org-tree-slide~ 的功能好像。

*** TODO org-ref
#+begin_src emacs-lisp :tangle yes
(setq reftex-default-bibliography bibliography-file)  ; 设置存放bibtex的文件目录
(setq org-ref-default-bibliography bibliography-file) ; 设置存放bibtex的文件路径
#+end_src

可以正常插入文献引用，但是遇到一些问题：
- 鼠标点击引用之后， ~org-ref-cite-candidates~ 会报错。

引用类型什么鬼？ ~org-ref-cite-types~
cite replace 什么鬼？ 

**** 笔记
对于其它字段（搜索），需要在 ~bibtex-completion-additional-search-fields~ 里中定义。

**** Commands
+ ~org-ref-bibliography~ :: 从org生成bibliography的索引（大概）
+ ~org-ref-helm-insert-cite-link~ :: "C-c ]" 插入文献引用，比如cite:dupoux16_cognit_scien_era_artif_intel。
+ ~org-ref-sort-citaion-link~ :: which will sort the keys by year, oldest to newest.



*** TODO org-web-tools
This file contains library functions and commands useful for retrieving web page content and processing it into Org-mode content.
用来保存网页内容。

*** TODO org-brain
brain strom, is similiar to XMind.
延迟吧，先现阶段还用不上啊。
Install via ~use-package~ :
#+begin_src emacs-lisp :tangle yes
(use-package org-brain :ensure t
  :init
  (setq org-brain-path "directory/path/where-i-want-org-brain")
  ;; For Evil users
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (push '("b" "Brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12))
#+end_src

*** TODO org-super-agenda
Enhance agenda viewer of org-mode.

*** TODO org-clock-convenience
directly modify timestamp in agenda viewer.

*** TODO ob-ipython
You know. Jupyter.

*** TODO cdlatex
在org-mode书写latex公式，配合ACuTex。

** Latex & Enhancement
就用Doom-Emacs默认提供的Latex模块。

** magit & github

** Projectile & Project Management
** write module

** lispy
书写lisp代码的利器。

** dired

*** dired-quick-sort

*** ivy-dired-history

*** dired-filter

*** dired-subtree

*** dired-narrow

*** dired-sidebar

*** diredfl

*** dired-k
doom-emacs默认自带。

** company
company的补全功能是真的很好用。

** posframe
- ivy-posframe :: keeping default configuration
- company-childframe :: keeping default configuration
     
** hydra
感觉需要配合vim键位，不喜欢。
